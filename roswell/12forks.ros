#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(declaim (optimize (speed 3)))
;(declaim (optimize (debug 3)))

(push (probe-file ".") asdf:*central-registry*)
(ql:quickload "12forks" :silent t)


(defpackage :12forks.cli
  (:use :cl)
  (:import-from :net.didierverna.clon
                :defsynopsis
                :make-context
                :getopt
                :remainder
                :help
                :exit))


(in-package :12forks.cli)


(defsynopsis (:postfix "REPOSITORY")
  (text :contents "This utility builds a report about all non-merged commits for any github repository. Just give some repository name like \"antirez/redis\" as an argument and pipe stdout to some file.
")
  (flag :short-name "h" :long-name "help"
        :description "Print this help and exit.")
  (flag :short-name "v" :long-name "version"
        :description "Print version number and exit.")
  (flag :long-name "debug"
        :description "Show traceback instead of short message.")
  (stropt :short-name "l" :long-name "log"
          :description "Filename to write log to.")
  (stropt :short-name "t" :long-name "token"
          :env-var "TOKEN"
          :description "GitHub personal access token."))


(defun do-the-job ()
  (let ((repo (first (remainder))))
    (if repo
        (progn (let ((repo-data (12forks::analyze-repo repo)))
                 (12forks::print-repo repo-data)))
        (help))))


(defun main (&rest args)
  (make-context :cmdline (cons "12forks" args))

  (let ((log-filename (getopt :long-name "log")))
    (when log-filename
      ;; remove console appenders from the root logger
      ;; to prevent them output to stdout
      (let ((state (log4cl::current-state log4cl:*root-logger*)))
        (setf (log4cl::logger-state-appenders state) nil))
      
      (log:config :daily log-filename :backup nil)
      (log:info "STARTING")))
  
  ;; initialize lparallel
  (setf lparallel:*kernel* (lparallel:make-kernel 8))
  
  (when (getopt :short-name "v")
    (format t "12forks cli, version: ~A~%" 12forks:*version*)
    (exit))

  (when (getopt :long-name "help")
    (help)
    (exit))

  (setf (getf 12forks::*config* :token)
        (getopt :long-name "token"))

  (if (getopt :long-name "debug")
      (do-the-job)
      ;; otherwise, handle any error and show only it's description
      (handler-case (do-the-job)
        (error (cond) (format t "~A~%" cond)))))

;;; vim: set ft=lisp lisp:
